import { MindmapSnapshot } from '../types/mindmap';

export const mockMindmap: MindmapSnapshot = {
  referenceRepository: {
    label: 'AI PM Reference Docs',
    url: 'https://github.com/example/aipm-reference-docs',
    description: 'Source of truth for requirements, personas, and acceptance criteria playbooks.',
  },
  mergeRequests: [
    {
      id: 'mr-2024-01',
      type: 'MR',
      title: 'MR: Bootstrap AI Project Manager Mindmap',
      description:
        'Create the foundational UI for an AI-assisted project manager that manages hierarchical user stories and acceptance tests.',
      status: 'in-progress',
      createdAt: '2024-03-01T08:00:00.000Z',
      updatedAt: '2024-03-05T17:22:00.000Z',
      userStories: [
        {
          id: 'us-1',
          parentId: null,
          type: 'UserStory',
          title: 'Visualize MR-driven hierarchy',
          asA: 'project manager',
          iWant: 'to see the MR and its breakdown in a mindmap',
          soThat: 'I can understand scope and progress at a glance',
          status: 'ready-for-test',
          acceptanceTests: [
            {
              id: 'at-1',
              parentUserStoryId: 'us-1',
              name: 'Display root MR summary',
              description: 'Ensure that the MR node renders with metadata and status coloring.',
              status: 'passed',
              given: 'Given I open the dashboard',
              when: 'When the MR data is loaded',
              then: 'Then I should see the MR title, description, and status indicator',
              lastRunAt: '2024-03-05T15:00:00.000Z',
              lastRunNotes: 'Reviewed with PO; visuals approved.',
            },
          ],
          children: [
            {
              id: 'us-1-1',
              parentId: 'us-1',
              type: 'UserStory',
              title: 'Inspect child user stories and acceptance tests',
              asA: 'developer',
              iWant: 'to drill down into child user stories',
              soThat: 'I can understand implementation expectations',
              status: 'in-progress',
              acceptanceTests: [
                {
                  id: 'at-2',
                  parentUserStoryId: 'us-1-1',
                  name: 'Expand child nodes',
                  description: 'Validate that clicking a node reveals its children and acceptance tests.',
                  status: 'in-review',
                  given: 'Given the MR tree is visible',
                  when: 'When I click a user story node',
                  then: 'Then the children and acceptance tests should appear in the detail panel',
                },
              ],
              children: [],
            },
          ],
        },
        {
          id: 'us-2',
          parentId: null,
          type: 'UserStory',
          title: 'Draft user stories with INVEST and Gherkin assistance',
          asA: 'AI project manager',
          iWant: 'to propose structured user stories and tests',
          soThat: 'teams can iterate quickly with quality safeguards',
          status: 'in-progress',
          acceptanceTests: [
            {
              id: 'at-3',
              parentUserStoryId: 'us-2',
              name: 'Generate story template',
              description: 'Provide As a / I want / So that placeholders pre-filled from MR context.',
              status: 'ready',
              given: 'Given a merge request summary',
              when: 'When I open the new user story modal',
              then: 'Then I should see the template populated with draft content',
            },
            {
              id: 'at-4',
              parentUserStoryId: 'us-2',
              name: 'Outline acceptance test draft',
              description:
                'Auto-generate a Given/When/Then skeleton that the user can refine before saving.',
              status: 'blocked',
              given: 'Given a new user story draft',
              when: 'When I request an acceptance test suggestion',
              then: 'Then I receive a structured proposal that is testable',
              lastRunNotes: 'Waiting on scenario catalog integration.',
            },
          ],
          children: [],
        },
      ],
    },
    {
      id: 'mr-2024-02',
      type: 'MR',
      title: 'MR: Acceptance Test Automation Hooks',
      description:
        'Introduce webhook listeners and execution logs so acceptance test outcomes update merge requests automatically.',
      status: 'draft',
      createdAt: '2024-03-04T10:00:00.000Z',
      updatedAt: '2024-03-04T10:00:00.000Z',
      userStories: [
        {
          id: 'us-3',
          parentId: null,
          type: 'UserStory',
          title: 'Capture GitHub webhook payloads',
          asA: 'release engineer',
          iWant: 'to receive merge request webhooks',
          soThat: 'acceptance test activity is synchronised with version control events',
          status: 'draft',
          acceptanceTests: [
            {
              id: 'at-5',
              parentUserStoryId: 'us-3',
              name: 'Store webhook payload',
              description: 'Persist incoming payloads for downstream processing and auditing.',
              status: 'draft',
              given: 'Given GitHub sends a merge request event',
              when: 'When the webhook handler receives the payload',
              then: 'Then the payload is validated and recorded with a timestamp',
            },
          ],
          children: [],
        },
      ],
    },
  ],
  acceptanceTestLog: [
    {
      id: 'log-1',
      testId: 'at-1',
      userStoryId: 'us-1',
      executedAt: '2024-03-05T15:00:00.000Z',
      tester: 'alex.lee',
      outcome: 'passed',
      notes: 'Screenshots archived in QA run #2024-03-05-A.',
    },
    {
      id: 'log-2',
      testId: 'at-2',
      userStoryId: 'us-1-1',
      executedAt: '2024-03-05T16:10:00.000Z',
      tester: 'maria.garcia',
      outcome: 'failed',
      notes: 'Detail panel did not render acceptance tests list.',
    },
    {
      id: 'log-3',
      testId: 'at-5',
      userStoryId: 'us-3',
      executedAt: '2024-03-04T11:30:00.000Z',
      tester: 'demian.kim',
      outcome: 'blocked',
      notes: 'Awaiting database scaffolding to persist payloads.',
    },
  ],
};
